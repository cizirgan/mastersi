
#include <opencv\cv.h>      
#include <opencv\ml.h>      
#include <stdio.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2\ml\ml.hpp>
#include <iostream>

using namespace cv;
using namespace std;

// The neural network
CvANN_MLP machineBrain;

void Predict(float data1, float data2)
{
	float _sample[2];
	CvMat sample = cvMat(1, 2, CV_32FC1, _sample);
	float _predout[1];
	CvMat predout = cvMat(1, 1, CV_32FC1, _predout);
	sample.data.fl[0] = data1;
	sample.data.fl[1] = data2;

	machineBrain.predict(&sample, &predout);

	printf("%f \n", predout.data.fl[0]);

}


int main()
{
	int number_of_training_samples;
	float td[1000][3];

	FILE *fin;
	fin = fopen("train.txt", "r");

	int train_sample_count;

	fscanf(fin, "%d", &train_sample_count);
	printf("Found training file with %d samples...\n", train_sample_count);

	//Input data samples. Matrix of order (train_sample_count x 2)
	CvMat* trainData = cvCreateMat(train_sample_count, 2, CV_32FC1);

	//Output data samples. Matrix of order (train_sample_count x 1)
	CvMat* trainClasses = cvCreateMat(train_sample_count, 1, CV_32FC1);

	//The weight of each training data sample. We'll later set all to equal weights.
	CvMat* sampleWts = cvCreateMat(train_sample_count, 1, CV_32FC1);

	//The matrix representation of our ANN. We'll have four layers.
	CvMat* neuralLayers = cvCreateMat(4, 1, CV_32SC1);

	CvMat trainData1, trainClasses1, neuralLayers1, sampleWts1;

	cvGetRows(trainData, &trainData1, 0, train_sample_count);
	cvGetRows(trainClasses, &trainClasses1, 0, train_sample_count);
	cvGetRows(trainClasses, &trainClasses1, 0, train_sample_count);
	cvGetRows(sampleWts, &sampleWts1, 0, train_sample_count);
	cvGetRows(neuralLayers, &neuralLayers1, 0, 4);


	cvSet1D(&neuralLayers1, 0, cvScalar(2));
	cvSet1D(&neuralLayers1, 1, cvScalar(3));
	cvSet1D(&neuralLayers1, 2, cvScalar(3));
	cvSet1D(&neuralLayers1, 3, cvScalar(1));


	//Read and populate the samples.
	for (int i = 0; i < train_sample_count; i++)
		fscanf(fin, "%f %f %f", &td[i][0], &td[i][1], &td[i][2]);

	fclose(fin);

	//Assemble the ML training data.
	for (int i = 0; i < train_sample_count; i++)
	{
		//Input 1
		cvSetReal2D(&trainData1, i, 0, td[i][0]);
		//Input 2
		cvSetReal2D(&trainData1, i, 1, td[i][1]);
		//Output
		cvSet1D(&trainClasses1, i, cvScalar(td[i][2]));
		//Weight (setting everything to 1)
		cvSet1D(&sampleWts1, i, cvScalar(1));
	}

	//Create our ANN.
	machineBrain.create(neuralLayers);

	//Train it with our data.
	//See the Machine learning reference at http://www.seas.upenn.edu/~bensapp/opencvdocs/ref/opencvref_ml.htm#ch_ann
	machineBrain.train(
		trainData,
		trainClasses,
		sampleWts,
		0,
		CvANN_MLP_TrainParams(
			cvTermCriteria(
				CV_TERMCRIT_ITER + CV_TERMCRIT_EPS,
				100000,
				0.001
			),
			CvANN_MLP_TrainParams::BACKPROP,
			0.01,
			0.5
		)
	);
	Predict(15.0, 20.0);
	Predict(1.0, 5.0);
	Predict(12.0, 3.0);
	waitKey(0);
	return 0;

}